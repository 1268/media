package main

import (
   "154.pages.dev/protobuf"
   "encoding/base64"
   "encoding/hex"
   "fmt"
   "io"
   "net/http"
   "net/http/httputil"
   "net/url"
   "os"
   "strings"
)

// LICENSE_STATUS_OK
const video_ID = "HPkDFc8hq5c"

func main() {
   var m protobuf.Message
   {
      b, err := base64.RawStdEncoding.DecodeString(video_ID)
      if err != nil {
         panic(err)
      }
      m.Add_String(1, hex.EncodeToString(b))
   }
   drm_params := base64.StdEncoding.EncodeToString(m.Append(nil))
   var req_body = fmt.Sprintf(`
   {
      "context": {
         "client": {
            "clientName": "WEB",
            "clientVersion": "2.20231020.00.01"
         }
      },
      "licenseRequest": "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",
      "drmSystem": "DRM_SYSTEM_WIDEVINE",
      "cpn": "-",
      "sessionId": "-",
      "videoId": %q,
      "drmParams": %q
   }
   `, video_ID, drm_params)
   var req http.Request
   req.Header = make(http.Header)
   req.Method = "POST"
   req.ProtoMajor = 1
   req.ProtoMinor = 1
   req.URL = new(url.URL)
   req.URL.Host = "www.youtube.com"
   req.URL.Path = "/youtubei/v1/player/get_drm_license"
   req.URL.Scheme = "https"
   req.Body = io.NopCloser(strings.NewReader(req_body))
   res, err := new(http.Transport).RoundTrip(&req)
   if err != nil {
      panic(err)
   }
   defer res.Body.Close()
   res_body, err := httputil.DumpResponse(res, true)
   if err != nil {
      panic(err)
   }
   os.Stdout.Write(res_body)
}

